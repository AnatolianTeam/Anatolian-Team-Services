"use strict";(self.webpackChunkservice=self.webpackChunkservice||[]).push([[4187],{9912:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=s(5893),i=s(1151);const a={title:"\ud83d\udcbe Installation",description:"Node installation guide.",image:"./img/0G-Service-Cover.jpg",keywords:["0g","ai","modular","chain","installation","snapshot","statesync","update"]},l="Installation",o={id:"Testnet/Cosmos-Ecosystem/0g/installation",title:"\ud83d\udcbe Installation",description:"Node installation guide.",source:"@site/docs/Testnet/Cosmos-Ecosystem/0g/installation.md",sourceDirName:"Testnet/Cosmos-Ecosystem/0g",slug:"/Testnet/Cosmos-Ecosystem/0g/installation",permalink:"/docs/Testnet/Cosmos-Ecosystem/0g/installation",draft:!1,unlisted:!1,editUrl:"https://github.com/AnatolianTeam/Anatolian-Team-Services/tree/master/docs/Testnet/Cosmos-Ecosystem/0g/installation.md",tags:[],version:"current",frontMatter:{title:"\ud83d\udcbe Installation",description:"Node installation guide.",image:"./img/0G-Service-Cover.jpg",keywords:["0g","ai","modular","chain","installation","snapshot","statesync","update"]},sidebar:"tutorialSidebar",previous:{title:"0G",permalink:"/docs/Testnet/Cosmos-Ecosystem/0g/"},next:{title:"\ud83d\udcf8 Snapshot",permalink:"/docs/Testnet/Cosmos-Ecosystem/0g/snapshot"}},r={image:s(3270).Z},d=[{value:"Updating the System",id:"updating-the-system",level:2},{value:"Installing the Necessary Libraries",id:"installing-the-necessary-libraries",level:2},{value:"Installing Go",id:"installing-go",level:2},{value:"Setting Variables",id:"setting-variables",level:2},{value:"Sample",id:"sample",level:3},{value:"Installing 0G",id:"installing-0g",level:2},{value:"Configuring and Launching the Node",id:"configuring-and-launching-the-node",level:2},{value:"Enabling and Starting the Service",id:"enabling-and-starting-the-service",level:2},{value:"Checking the Logs",id:"checking-the-logs",level:2},{value:"StateSync",id:"statesync",level:2},{value:"Checking Synchronization",id:"checking-synchronization",level:2},{value:"Wallet",id:"wallet",level:2},{value:"Creating a New Wallet",id:"creating-a-new-wallet",level:3},{value:"Importing an Existing Wallet",id:"importing-an-existing-wallet",level:3},{value:"Learning Your EVM Address",id:"learning-your-evm-address",level:3},{value:"Faucet",id:"faucet",level:3},{value:"Add Network to Wallet",id:"add-network-to-wallet",level:3},{value:"Wallet and Valoper Info",id:"wallet-and-valoper-info",level:2},{value:"Checking Wallet Balance",id:"checking-wallet-balance",level:3},{value:"Creating Validator",id:"creating-validator",level:2},{value:"Completely Deleting the Node",id:"completely-deleting-the-node",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h2,{id:"updating-the-system",children:"Updating the System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"apt update && apt upgrade -y\n"})}),"\n",(0,t.jsx)(n.h2,{id:"installing-the-necessary-libraries",children:"Installing the Necessary Libraries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'apt install make clang pkg-config libssl-dev libclang-dev build-essential git curl ntp jq llvm tmux htop screen gcc lz4 -y < "/dev/null"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"installing-go",children:"Installing Go"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ver=\"1.21.6\"\nwget \"https://golang.org/dl/go$ver.linux-amd64.tar.gz\"\nrm -rf /usr/local/go\ntar -C /usr/local -xzf \"go$ver.linux-amd64.tar.gz\"\nrm -rf \"go$ver.linux-amd64.tar.gz\"\necho 'export GOROOT=/usr/local/go' >> $HOME/.bash_profile\necho 'export GOPATH=$HOME/go' >> $HOME/.bash_profile\necho 'export GO111MODULE=on' >> $HOME/.bash_profile\necho 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> $HOME/.bash_profile\nsource $HOME/.bash_profile\ngo version\n"})}),"\n",(0,t.jsx)(n.h2,{id:"setting-variables",children:"Setting Variables"}),"\n",(0,t.jsx)(n.p,{children:"The areas you need to change are written below."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$OG_NODENAME"})," your validator name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$OG_WALLET"})," your wallet name"]}),"\n",(0,t.jsxs)(n.li,{children:["If another node is using the port, you can change it below. You must enter a different value where it says ",(0,t.jsx)(n.code,{children:"11"}),", again as two digits."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'echo "export OG_NODENAME=$OG_NODENAME"  >> $HOME/.bash_profile\necho "export OG_WALLET=$OG_WALLET" >> $HOME/.bash_profile\necho "export OG_PORT=11" >> $HOME/.bash_profile\necho "export OG_CHAIN_ID=zgtendermint_9000-1" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,t.jsxs)(n.p,{children:["Let's assume that your Node (",(0,t.jsx)(n.code,{children:"OG_NODENAME"}),") and Wallet (",(0,t.jsx)(n.code,{children:"OG_WALLET"}),") name is ",(0,t.jsx)(n.code,{children:"Anatolian-Guide"})," and the port you will use (",(0,t.jsx)(n.code,{children:"OG_PORT"}),") will be ",(0,t.jsx)(n.code,{children:"16656"}),". The code will be arranged as shown below."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'echo "export OG_NODENAME=Anatolian-Guide"  >> $HOME/.bash_profile\necho "export OG_WALLET=Anatolian-Guide" >> $HOME/.bash_profile\necho "export OG_PORT=16" >> $HOME/.bash_profile\necho "export OG_CHAIN_ID=zgtendermint_9000-1" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'})}),"\n",(0,t.jsx)(n.h2,{id:"installing-0g",children:"Installing 0G"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git clone https://github.com/0glabs/0g-evmos.git\ncd 0g-evmos\ngit checkout v1.0.0-testnet\nmake install\nevmosd version\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuring-and-launching-the-node",children:"Configuring and Launching the Node"}),"\n",(0,t.jsx)(n.p,{children:"We copy and paste the codes below without making any changes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'evmosd config chain-id $OG_CHAIN_ID\nevmosd config keyring-backend test\nevmosd init --chain-id $OG_CHAIN_ID $OG_NODENAME\n\n# Copying the Genesis and addrbook Files\nwget https://github.com/0glabs/0g-evmos/releases/download/v1.0.0-testnet/genesis.json -O $HOME/.evmosd/config/genesis.json\n\n# Set up the minimum gas price\nsed -i \'s|^minimum-gas-prices *=.*|minimum-gas-prices = "0.005aevmos "|g\' $HOME/.evmosd/config/app.toml\n\n# Closing Indexer-Optional\nindexer="null"\nsed -i -e "s/^indexer *=.*/indexer = \\"$indexer\\"/" $HOME/.evmosd/config/config.toml\n\n# Set up SEED and PEERS\nPEERS="1248487ea585730cdf5d3c32e0c2a43ad0cda973@peer-zero-gravity-testnet.trusted-point.com:26326,b2a30b824a4358f8bc2ee648770b31b5eba3a853@85.10.200.82:26656"\nSEEDS="8c01665f88896bca44e8902a30e4278bed08033f@54.241.167.190:26656,b288e8b37f4b0dbd9a03e8ce926cd9c801aacf27@54.176.175.48:26656,8e20e8e88d504e67c7a3a58c2ea31d965aa2a890@54.193.250.204:26656,e50ac888b35175bfd4f999697bdeb5b7b52bfc06@54.215.187.94:26656"\nsed -i \'s|^seeds *=.*|seeds = "\'$SEEDS\'"|; s|^persistent_peers *=.*|persistent_peers = "\'$PEERS\'"|\' $HOME/.evmosd/config/config.toml\n\n# Enabling Prometheus\nsed -i \'s|^prometheus *=.*|prometheus = true|\' $HOME/.evmosd/config/config.toml\n\n# Set up Pruning \npruning="custom"\npruning_keep_recent="100"\npruning_keep_every="0"\npruning_interval="50"\nsed -i -e "s/^pruning *=.*/pruning = \\"$pruning\\"/" $HOME/.evmosd/config/app.toml\nsed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \\"$pruning_keep_recent\\"/" $HOME/.evmosd/config/app.toml\nsed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \\"$pruning_keep_every\\"/" $HOME/.evmosd/config/app.toml\nsed -i -e "s/^pruning-interval *=.*/pruning-interval = \\"$pruning_interval\\"/" $HOME/.evmosd/config/app.toml\n\n# Set up Ports\nsed -i.bak -e "\ns%:26658%:${OG_PORT}658%g;\ns%:26657%:${OG_PORT}657%g;\ns%:6060%:${OG_PORT}060%g;\ns%:26656%:${OG_PORT}656%g;\ns%:26660%:${OG_PORT}660%g\n" $HOME/.evmosd/config/config.toml\nsed -i.bak -e "\ns%:1317%:${OG_PORT}317%g; \ns%:8080%:${OG_PORT}080%g; \ns%:9090%:${OG_PORT}090%g; \ns%:9091%:${OG_PORT}091%g\n" $HOME/.evmosd/config/app.toml\nsed -i.bak -e "s%:26657%:${OG_PORT}657%g" $HOME/.evmosd/config/client.toml\n\n# Adding External Address\nPUB_IP=`curl -s -4 icanhazip.com`\nsed -e "s|external_address = \\".*\\"|external_address = \\"$PUB_IP:${OG_PORT}656\\"|g" ~/.evmosd/config/config.toml > ~/.evmosd/config/config.toml.tmp\nmv ~/.evmosd/config/config.toml.tmp  ~/.evmosd/config/config.toml\n\n# Creating the Service File\ntee /etc/systemd/system/evmosd.service > /dev/null << EOF\n[Unit]\nDescription=0G Node\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which evmosd) start\nRestart=on-failure\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n'})}),"\n",(0,t.jsx)(n.h2,{id:"enabling-and-starting-the-service",children:"Enabling and Starting the Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"systemctl daemon-reload\nsystemctl enable evmosd\nsystemctl start evmosd\n"})}),"\n",(0,t.jsx)(n.h2,{id:"checking-the-logs",children:"Checking the Logs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"journalctl -u evmosd -f -o cat\n"})}),"\n",(0,t.jsx)(n.h2,{id:"statesync",children:"StateSync"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"systemctl stop evmosd\n\ncp $HOME/.evmosd/data/priv_validator_state.json $HOME/.evmosd/priv_validator_state.json.backup\nevmosd tendermint unsafe-reset-all --home $HOME/.evmosd --keep-addr-book\n\nSNAP_RPC=\"https://rpc-t-0g.anatolianteam.com:443\"\n\nLATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height)\nBLOCK_HEIGHT=$((LATEST_HEIGHT - 2000))\nTRUST_HASH=$(curl -s \"$SNAP_RPC/block?height=$BLOCK_HEIGHT\" | jq -r .result.block_id.hash)\n\necho $LATEST_HEIGHT $BLOCK_HEIGHT $TRUST_HASH\n\nsed -i 's|^enable *=.*|enable = true|' $HOME/.evmosd/config/config.toml\nsed -i 's|^rpc_servers *=.*|rpc_servers = \"'$SNAP_RPC,$SNAP_RPC'\"|' $HOME/.evmosd/config/config.toml\nsed -i 's|^trust_height *=.*|trust_height = '$BLOCK_HEIGHT'|' $HOME/.evmosd/config/config.toml\nsed -i 's|^trust_hash *=.*|trust_hash = \"'$TRUST_HASH'\"|' $HOME/.evmosd/config/config.toml\n\nmv $HOME/.evmosd/priv_validator_state.json.backup $HOME/.evmosd/data/priv_validator_state.json\n\nsystemctl restart evmosd && journalctl -u evmosd -f -o cat\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"AFTER THIS STAGE, WE EXPECT OUR NODE TO SYNC."})}),"\n",(0,t.jsx)(n.h2,{id:"checking-synchronization",children:"Checking Synchronization"}),"\n",(0,t.jsxs)(n.p,{children:["Unless we get a ",(0,t.jsx)(n.code,{children:"false"})," output, we do not move on to the next step, namely creating a validator."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"evmosd status 2>&1 | jq .SyncInfo\n"})}),"\n",(0,t.jsx)(n.h2,{id:"wallet",children:"Wallet"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-new-wallet",children:"Creating a New Wallet"}),"\n",(0,t.jsxs)(n.p,{children:["We do not change the ",(0,t.jsx)(n.code,{children:"$OG_WALLET"})," section, we named our wallet with variables at the beginning of the installation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"evmosd keys add $OG_WALLET\n"})}),"\n",(0,t.jsx)(n.h3,{id:"importing-an-existing-wallet",children:"Importing an Existing Wallet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"evmosd keys add $OG_WALLET --recover\n"})}),"\n",(0,t.jsx)(n.h3,{id:"learning-your-evm-address",children:"Learning Your EVM Address"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"echo \"0x$(evmosd debug addr $(evmosd keys show $OG_WALLET -a) | grep hex | awk '{print $3}')\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"faucet",children:"Faucet"}),"\n",(0,t.jsxs)(n.p,{children:["And then request tokens from the ",(0,t.jsx)(n.a,{href:"https://faucet.0g.ai/",children:"faucet"})," to your address above."]}),"\n",(0,t.jsx)(n.h3,{id:"add-network-to-wallet",children:"Add Network to Wallet"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Details"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Network name"})}),(0,t.jsx)(n.td,{children:"0g Newton Testnet"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"New RPC URL"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://rpc-testnet.0g.ai/",children:"https://rpc-testnet.0g.ai/"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Chain ID"})}),(0,t.jsx)(n.td,{children:"9000"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Currency symbol:"})}),(0,t.jsx)(n.td,{children:"A0GI"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"wallet-and-valoper-info",children:"Wallet and Valoper Info"}),"\n",(0,t.jsx)(n.p,{children:"Here we add our wallet and valve information to the variable."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"OG_WALLET_ADDRESS=$(evmosd keys show $OG_WALLET -a)\nOG_VALOPER_ADDRESS=$(evmosd keys show $OG_WALLET --bech val -a)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"echo 'export OG_WALLET_ADDRESS='${OG_WALLET_ADDRESS} >> $HOME/.bash_profile\necho 'export OG_VALOPER_ADDRESS='${OG_VALOPER_ADDRESS} >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-wallet-balance",children:"Checking Wallet Balance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"evmosd query bank balances $OG_WALLET_ADDRESS\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"If the synchronization is completed, we proceed to the following step."})}),"\n",(0,t.jsx)(n.h2,{id:"creating-validator",children:"Creating Validator"}),"\n",(0,t.jsx)(n.p,{children:"You do not need to make any changes to the following command other than the places specified below;"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"identity"})," where it says ",(0,t.jsx)(n.code,{children:"XXXX1111XXXX1111"})," you write your identification number given to you as a member of the ",(0,t.jsx)(n.a,{href:"https://keybase.io/",children:"keybase"})," site."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"details"})," You can write information about yourself where it says ",(0,t.jsx)(n.code,{children:"Always forward with the Anatolian Team \ud83d\udc06"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"website"})," where it says ",(0,t.jsx)(n.code,{children:"https://anatolianteam.com"}),", if you have a website or twitter etc. You can write your address."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"security-contact"})," Your email address."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'evmosd tx staking create-validator \\\n--amount=10000000000000000aevmos \\\n--pubkey=$(evmosd tendermint show-validator) \\\n--moniker=$OG_NODENAME \\\n--chain-id=$OG_CHAIN_ID \\\n--commission-rate=0.10 \\\n--commission-max-rate=0.20 \\\n--commission-max-change-rate=0.05 \\\n--min-self-delegation="1" \\\n--gas-prices=0.25aevmos  \\\n--gas-adjustment=1.5 \\\n--gas=auto \\\n--from=$OG_WALLET \\\n--details="Always forward with the Anatolian Team \ud83d\udc06" \\\n--security-contact="xxxxxxx@gmail.com" \\\n--website="https://anatolianteam.com" \\\n--identity="XXXX1111XXXX1111" \\\n--yes\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If you get an error, add this before ",(0,t.jsx)(n.code,{children:"--yes"}),": ",(0,t.jsx)(n.code,{children:"--node=https://rpc-t-0g.anatolianteam.com:443 \\"})]})}),"\n",(0,t.jsx)(n.h2,{id:"completely-deleting-the-node",children:"Completely Deleting the Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"systemctl stop evmosd && \\\nsystemctl disable evmosd && \\\nrm /etc/systemd/system/evmosd.service && \\\nsystemctl daemon-reload && \\\ncd $HOME && \\\nrm -rf .evmosd 0g-evmos && \\\nrm -rf $(which evmosd)\nsed -i '/OG_/d' ~/.bash_profile\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},3270:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/0G-Service-Cover-98960b183eb86dd7d944869365d34be6.jpg"},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>l});var t=s(7294);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);