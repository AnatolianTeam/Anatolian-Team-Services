"use strict";(self.webpackChunkservice=self.webpackChunkservice||[]).push([[4959],{32270:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=l(85893),a=l(11151);const o={title:"\ud83d\udcbe Worker Intallation",description:"Allora worker installation guide.",image:"./img/Allora-Service-Cover.jpg",keywords:["Allora","AI","Layer 1","installation"]},t="Allora Price Prediction Worker Node Installation",i={id:"Testnet/allora/worker",title:"\ud83d\udcbe Worker Intallation",description:"Allora worker installation guide.",source:"@site/docs/Testnet/allora/worker.md",sourceDirName:"Testnet/allora",slug:"/Testnet/allora/worker",permalink:"/docs/Testnet/allora/worker",draft:!1,unlisted:!1,editUrl:"https://github.com/AnatolianTeam/Anatolian-Team-Services/tree/master/docs/Testnet/allora/worker.md",tags:[],version:"current",frontMatter:{title:"\ud83d\udcbe Worker Intallation",description:"Allora worker installation guide.",image:"./img/Allora-Service-Cover.jpg",keywords:["Allora","AI","Layer 1","installation"]},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udee0\ufe0f Update",permalink:"/docs/Testnet/allora/update"},next:{title:"Eclipse",permalink:"/docs/Testnet/eclipse/"}},s={image:l(979).Z},c=[{value:"Updating the System, Installing Python and Installing Required Libraries",id:"updating-the-system-installing-python-and-installing-required-libraries",level:2},{value:"Installing Docker",id:"installing-docker",level:2},{value:"Installing Docker Compose",id:"installing-docker-compose",level:2},{value:"Installing Go",id:"installing-go",level:2},{value:"Installing Allora &amp; Wallet",id:"installing-allora--wallet",level:2},{value:"Creating a New Wallet",id:"creating-a-new-wallet",level:3},{value:"Importing an Existing Wallet",id:"importing-an-existing-wallet",level:3},{value:"Adding the Allora Network",id:"adding-the-allora-network",level:2},{value:"Allora Dashboard",id:"allora-dashboard",level:2},{value:"Faucet",id:"faucet",level:2},{value:"Installing the Allora Huggingface Walkthrough Worker",id:"installing-the-allora-huggingface-walkthrough-worker",level:2},{value:"Creating the Data Files",id:"creating-the-data-files",level:3},{value:"Changing Port (Optional)",id:"changing-port-optional",level:3},{value:"Creating the Config File",id:"creating-the-config-file",level:3},{value:"Creating the Coingecko API key**",id:"creating-the-coingecko-api-key",level:3},{value:"Running the Allora Huggingface Worker",id:"running-the-allora-huggingface-worker",level:2},{value:"Checking the Logs",id:"checking-the-logs",level:2},{value:"Allora Points",id:"allora-points",level:2},{value:"Cheking Update the Node and ETH Price",id:"cheking-update-the-node-and-eth-price",level:2},{value:"Completely Deleting the Node",id:"completely-deleting-the-node",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"allora-price-prediction-worker-node-installation",children:"Allora Price Prediction Worker Node Installation"}),"\n",(0,r.jsx)(n.h2,{id:"updating-the-system-installing-python-and-installing-required-libraries",children:"Updating the System, Installing Python and Installing Required Libraries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'apt update && apt upgrade -y\nsudo apt install python3 && sudo apt install python3-pip\napt install ca-certificates curl gnupg lsb-release git htop liblz4-tool screen wget make jq gcc unzip lz4 build-essential pkg-config libssl-dev libreadline-dev libffi-dev zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev -y < "/dev/null"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"installing-docker",children:"Installing Docker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n"})}),"\n",(0,r.jsx)(n.h2,{id:"installing-docker-compose",children:"Installing Docker Compose"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n'})}),"\n",(0,r.jsx)(n.h2,{id:"installing-go",children:"Installing Go"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'ver="1.22.2" && \\\nwget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \\\nrm -rf /usr/local/go && \\\ntar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \\\nrm "go$ver.linux-amd64.tar.gz" && \\\necho "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \\\nsource $HOME/.bash_profile\n'})}),"\n",(0,r.jsx)(n.h2,{id:"installing-allora--wallet",children:"Installing Allora & Wallet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/allora-network/allora-chain.git\ncd allora-chain && make all\n"})}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-new-wallet",children:"Creating a New Wallet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"allorad keys add WALLET_NAME\n"})}),"\n",(0,r.jsx)(n.h3,{id:"importing-an-existing-wallet",children:"Importing an Existing Wallet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"allorad keys add WALLET_NAME --recover\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Then import your wallet to Keplr."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"adding-the-allora-network",children:"Adding the Allora Network"}),"\n",(0,r.jsxs)(n.p,{children:["Go to the Allora ",(0,r.jsx)(n.a,{href:"https://explorer.edgenet.allora.network/wallet/suggest",children:"explorer"})," page and add the network."]}),"\n",(0,r.jsx)(n.h2,{id:"allora-dashboard",children:"Allora Dashboard"}),"\n",(0,r.jsxs)(n.p,{children:["We will monitor our scores on the Allora ",(0,r.jsx)(n.a,{href:"https://app.allora.network",children:"dashboard"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"faucet",children:"Faucet"}),"\n",(0,r.jsxs)(n.p,{children:["Request tokens for the Allora wallet from the ",(0,r.jsx)(n.a,{href:"https://faucet.edgenet.allora.network/",children:"Faucet"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"installing-the-allora-huggingface-walkthrough-worker",children:"Installing the Allora Huggingface Walkthrough Worker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cd $HOME\ngit clone https://github.com/allora-network/allora-huggingface-walkthrough\ncd allora-huggingface-walkthrough\n"})}),"\n",(0,r.jsx)(n.h3,{id:"creating-the-data-files",children:"Creating the Data Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mkdir worker-data\nchmod -R 777 worker-data\n"})}),"\n",(0,r.jsx)(n.h3,{id:"changing-port-optional",children:"Changing Port (Optional)"}),"\n",(0,r.jsx)(n.p,{children:"If there is another application on your server that uses port 8000, you need to change it."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Kullanmak istedi\u011finiz port numaras\u0131n\u0131 ",(0,r.jsx)(n.code,{children:"YOUR_PORT"})," yazan yere girin ve kodu \xe7al\u0131\u015ft\u0131r\u0131n.\nEnter the port number you want to use in the place where it says ",(0,r.jsx)(n.code,{children:"YOUR_PORT"})," and run the code."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'PORT="YOUR_PORT"\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Then run following code."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'sed -i.bak -e "s%8000:8000%${YOUR_PORT}:${YOUR_PORT}%g" $HOME/allora-huggingface-walkthrough/docker-compose.yaml \n'})}),"\n",(0,r.jsx)(n.h3,{id:"creating-the-config-file",children:"Creating the Config File"}),"\n",(0,r.jsx)(n.p,{children:"Run the code below by entering your wallet name and seed phrase."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'MNEMONIC=""\nCUZDAN_ADI=""\n'})}),"\n",(0,r.jsx)(n.p,{children:"Run the following code without any changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'tee $HOME/allora-huggingface-walkthrough/config.json > /dev/null << EOF\n{\n    "wallet": {\n        "addressKeyName": "$CUZDAN_ADI",\n        "addressRestoreMnemonic": "$MNEMONIC",\n        "alloraHomeDir": "/root/.allorad",\n        "gas": "1000000",\n        "gasAdjustment": 1.0,\n        "nodeRpc": "https://allora-rpc.testnet-1.testnet.allora.network/",\n        "maxRetries": 1,\n        "delay": 1,\n        "submitTx": false\n    },\n    "worker": [\n        {\n            "topicId": 1,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 1,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "ETH"\n            }\n        },\n        {\n            "topicId": 2,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 3,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "ETH"\n            }\n        },\n        {\n            "topicId": 3,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 5,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "BTC"\n            }\n        },\n        {\n            "topicId": 4,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 2,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "BTC"\n            }\n        },\n        {\n            "topicId": 5,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 4,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "SOL"\n            }\n        },\n        {\n            "topicId": 6,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 5,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "SOL"\n            }\n        },\n        {\n            "topicId": 7,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 2,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "ETH"\n            }\n        },\n        {\n            "topicId": 8,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 3,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "BNB"\n            }\n        },\n        {\n            "topicId": 9,\n            "inferenceEntrypointName": "api-worker-reputer",\n            "loopSeconds": 5,\n            "parameters": {\n                "InferenceEndpoint": "http://inference:8000/inference/{Token}",\n                "Token": "ARB"\n            }\n        }\n        \n    ]\n}\nEOF\n'})}),"\n",(0,r.jsx)(n.h3,{id:"creating-the-coingecko-api-key",children:"Creating the Coingecko API key**"}),"\n",(0,r.jsxs)(n.p,{children:["Get an API Key for yourself at ",(0,r.jsx)(n.a,{href:"https://www.coingecko.com/en/developers/dashboard",children:"https://www.coingecko.com/en/developers/dashboard"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Write your own API in the code below, where it says",(0,r.jsx)(n.code,{children:"YOUR_API"}),", and run the code."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'APIKEY="YOUR_API"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then run following code."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'sed -i.bak -e "s%<Your Coingecko API key>%${APIKEY}%g" $HOME/allora-huggingface-walkthrough/app.py \n'})}),"\n",(0,r.jsx)(n.h2,{id:"running-the-allora-huggingface-worker",children:"Running the Allora Huggingface Worker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"chmod +x init.config\n./init.config\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"docker compose up --build -d\n"})}),"\n",(0,r.jsx)(n.h2,{id:"checking-the-logs",children:"Checking the Logs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"docker compose logs -f worker\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"docker compose logs -f\n"})}),"\n",(0,r.jsx)(n.h2,{id:"allora-points",children:"Allora Points"}),"\n",(0,r.jsxs)(n.p,{children:["Go to ",(0,r.jsx)(n.a,{href:"https://app.allora.network?ref=eyJyZWZlcnJlcl9pZCI6IjBlNWRhMjlmLTc3YjItNDQ2NS1hYTcxLTk0NWI3NjRhMTA0ZiJ9",children:"Allora Points"})," page and connect your wallet to check your scores."]}),"\n",(0,r.jsx)(n.h2,{id:"cheking-update-the-node-and-eth-price",children:"Cheking Update the Node and ETH Price"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"curl http://localhost:8000/update\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"curl http://localhost:8000/inference/ETH\n"})}),"\n",(0,r.jsx)(n.h2,{id:"completely-deleting-the-node",children:"Completely Deleting the Node"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'rm -rf allora-chain\nrm -rf .allorad\nrm -rf basic-coin-prediction-node\nbash -c "$(curl -s https://raw.githubusercontent.com/blackowltr/Testnetler-ve-Rehberler/main/Allora/stop.sh)"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},979:(e,n,l)=>{l.d(n,{Z:()=>r});const r=l.p+"assets/images/Allora-Service-Cover-cfd2d18aecc051f86a0c8e692e800e9b.jpg"},11151:(e,n,l)=>{l.d(n,{Z:()=>i,a:()=>t});var r=l(67294);const a={},o=r.createContext(a);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);