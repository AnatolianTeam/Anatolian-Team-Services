"use strict";(self.webpackChunkservice=self.webpackChunkservice||[]).push([[1682],{7110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(5893),r=n(1151),s=n(4866),o=n(5162);const i={title:"\ud83d\udcb0 Stake Activation",description:"Ar.io stake activation guide.",image:"./img/Ar-Service-Cover.jpg",keywords:["Ar.io","Ar","permaweb","kurulum","rehber"],sidebar_position:3},l="Ar.io Stake Aktif Etme Rehberi",c={id:"Testnet/Arweave Ecosystem/ar.io/stake-activate",title:"\ud83d\udcb0 Stake Activation",description:"Ar.io stake activation guide.",source:"@site/docs/Testnet/Arweave Ecosystem/ar.io/stake-activate.md",sourceDirName:"Testnet/Arweave Ecosystem/ar.io",slug:"/Testnet/Arweave Ecosystem/ar.io/stake-activate",permalink:"/tr/docs/Testnet/Arweave Ecosystem/ar.io/stake-activate",draft:!1,unlisted:!1,editUrl:"https://github.com/AnatolianTeam/Anatolian-Team-Services/tree/master/docs/Testnet/Arweave Ecosystem/ar.io/stake-activate.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udcb0 Stake Activation",description:"Ar.io stake activation guide.",image:"./img/Ar-Service-Cover.jpg",keywords:["Ar.io","Ar","permaweb","kurulum","rehber"],sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\u25b6\ufe0f Joining the Testnet",permalink:"/tr/docs/Testnet/Arweave Ecosystem/ar.io/join-ario"},next:{title:"\ud83d\udcb0 Delegation",permalink:"/tr/docs/Testnet/Arweave Ecosystem/ar.io/stake-delegation"}},d={image:n(1914).Z},u=[{value:"update-gateway-settings.ts Dosyasn\u0131n D\xfczenlenmesi",id:"update-gateway-settingsts-dosyasn\u0131n-d\xfczenlenmesi",level:2},{value:"About update-gateway-settings.ts File",id:"about-update-gateway-settingsts-file",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"ario-stake-aktif-etme-rehberi",children:"Ar.io Stake Aktif Etme Rehberi"}),"\n",(0,a.jsx)(t.p,{children:"This section explains what needs to be done to activate staking."}),"\n",(0,a.jsx)(t.h2,{id:"update-gateway-settingsts-dosyasn\u0131n-d\xfczenlenmesi",children:"update-gateway-settings.ts Dosyasn\u0131n D\xfczenlenmesi"}),"\n",(0,a.jsx)(t.p,{children:"Open the file with the code below."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"nano $HOME/testnet-contract/tools/update-gateway-settings.ts\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Then make the following changes:\nRemove the ",(0,a.jsx)(t.code,{children:"//"})," from the beginning of the variables."]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"const allowDelegatedStaking: boolean = true;"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"const delegateRewardShareRatio: number = 10;"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"const minDelegatedStake: number = 100;"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"allowDelegatedStaking,"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"delegateRewardShareRatio,"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"minDelegatedStake,"})}),"\n"]}),"\n","\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"You can review the areas that will be changed here."}),(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(o.Z,{value:"Original Version",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import { JWKInterface } from 'arweave/node/lib/wallet';\n\nimport { IOState } from '../src/types';\nimport {\n  arnsContractTxId,\n  arweave,\n  getContractManifest,\n  initialize,\n  loadWallet,\n  warp,\n} from './utilities';\n\n/* eslint-disable no-console */\n// This script will update the settings for a gateway that is already joined to the network\n// Only the gateway's wallet owner is authorized to adjust these settings\n(async () => {\n  initialize();\n\n  // the friendly label for this gateway\n  // const label = 'Test Gateway';\n\n  // the fully qualified domain name for this gateway eg. arweave.net\n  // const fqdn = 'permanence-testing.org';\n\n  // uncomment the below settings and update as needed\n  // the port used for this gateway eg. 443\n  // const port = 443\n\n  // the application layer protocol used by this gateway eg http or https\n  // const protocol = 'https'\n\n  // an optional gateway properties file located at this Arweave transaction id eg.\n  // const properties = 'FH1aVetOoulPGqgYukj0VE0wIhDy90WiQoV3U2PeY44'\n\n  // an optional, short note to further describe this gateway and its status\n  // const note = 'Give me feedback about this gateway at my Xwitter @testgatewayguy'\n\n  // The observer wallet public address eg.iKryOeZQMONi2965nKz528htMMN_sBcjlhc-VncoRjA which is used to upload observation reports\n  // const observerWallet = '';\n\n  // Enable or disable delegated staking.  If true, other token holders can delegate their stake to this gateway\n  // const allowDelegatedStaking: boolean = true;\n\n  // Number between 0-100 indicating the percent of gateway and observer rewards given to delegates eg. 30 is 30% distributed to delegates\n  // The default is 0\n  // const delegateRewardShareRatio: number = 10;\n\n  // The minimum stake in IO a delegate must use for this for this gateway.  Must be greater than the contracts minimum delegated stake\n  // The default is 100 IO\n  // const minDelegatedStake: number = 200;\n\n  // Get the key file used for the distribution\n  const wallet: JWKInterface = loadWallet();\n\n  // wallet address\n  const walletAddress = await arweave.wallets.getAddress(wallet);\n\n  // get contract manifest\n  const { evaluationOptions = {} } = await getContractManifest({\n    contractTxId: arnsContractTxId,\n  });\n\n  // Read the ANT Registry Contract\n  const contract = await warp\n    .contract<IOState>(arnsContractTxId)\n    .connect(wallet)\n    .setEvaluationOptions(evaluationOptions)\n    .syncState(`https://api.arns.app/v1/contract/${arnsContractTxId}`, {\n      validity: true,\n    });\n\n  // Include any settings as needed below\n  const writeInteraction = await contract.writeInteraction(\n    {\n      function: 'updateGatewaySettings',\n      // label,\n      // fqdn,\n      // observerWallet,\n      // port,\n      // protocol,\n      // properties,\n      // allowDelegatedStaking,\n      // delegateRewardShareRatio,\n      // minDelegatedStake,\n      // note\n    },\n    {\n      disableBundling: true,\n    },\n  );\n\n  console.log(\n    `${walletAddress} successfully updated gateway settings with TX id: ${writeInteraction?.originalTxId}`,\n  );\n})();\n"})})}),(0,a.jsx)(o.Z,{value:"Modified Version",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import { JWKInterface } from 'arweave/node/lib/wallet';\n\nimport { IOState } from '../src/types';\nimport {\n  arnsContractTxId,\n  arweave,\n  getContractManifest,\n  initialize,\n  loadWallet,\n  warp,\n} from './utilities';\n\n/* eslint-disable no-console */\n// This script will update the settings for a gateway that is already joined to the network\n// Only the gateway's wallet owner is authorized to adjust these settings\n(async () => {\n  initialize();\n\n  // the friendly label for this gateway\n  // const label = 'Test Gateway';\n\n  // the fully qualified domain name for this gateway eg. arweave.net\n  // const fqdn = 'permanence-testing.org';\n\n  // uncomment the below settings and update as needed\n  // the port used for this gateway eg. 443\n  // const port = 443\n\n  // the application layer protocol used by this gateway eg http or https\n  // const protocol = 'https'\n\n  // an optional gateway properties file located at this Arweave transaction id eg.\n  // const properties = 'FH1aVetOoulPGqgYukj0VE0wIhDy90WiQoV3U2PeY44'\n\n  // an optional, short note to further describe this gateway and its status\n  // const note = 'Give me feedback about this gateway at my Xwitter @testgatewayguy'\n\n  // The observer wallet public address eg.iKryOeZQMONi2965nKz528htMMN_sBcjlhc-VncoRjA which is used to upload observation reports\n  // const observerWallet = '';\n\n  // Enable or disable delegated staking.  If true, other token holders can delegate their stake to this gateway\n  const allowDelegatedStaking: boolean = true;\n\n  // Number between 0-100 indicating the percent of gateway and observer rewards given to delegates eg. 30 is 30% distributed to delegates\n  // The default is 0\n  const delegateRewardShareRatio: number = 10;\n\n  // The minimum stake in IO a delegate must use for this for this gateway.  Must be greater than the contracts minimum delegated stake\n  // The default is 100 IO\n  const minDelegatedStake: number = 100;\n\n  // Get the key file used for the distribution\n  const wallet: JWKInterface = loadWallet();\n\n  // wallet address\n  const walletAddress = await arweave.wallets.getAddress(wallet);\n\n  // get contract manifest\n  const { evaluationOptions = {} } = await getContractManifest({\n    contractTxId: arnsContractTxId,\n  });\n\n  // Read the ANT Registry Contract\n  const contract = await warp\n    .contract<IOState>(arnsContractTxId)\n    .connect(wallet)\n    .setEvaluationOptions(evaluationOptions)\n    .syncState(`https://api.arns.app/v1/contract/${arnsContractTxId}`, {\n      validity: true,\n    });\n\n  // Include any settings as needed below\n  const writeInteraction = await contract.writeInteraction(\n    {\n      function: 'updateGatewaySettings',\n      // label,\n      // fqdn,\n      // observerWallet,\n      // port,\n      // protocol,\n      // properties,\n      allowDelegatedStaking,\n      delegateRewardShareRatio,\n      minDelegatedStake,\n      // note\n    },\n    {\n      disableBundling: true,\n    },\n  );\n\n  console.log(\n    `${walletAddress} successfully updated gateway settings with TX id: ${writeInteraction?.originalTxId}`,\n  );\n})();\n"})})})]})]}),"\n",(0,a.jsx)(t.p,{children:"If you have completed the changes, run the following command:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"cd $HOME/testnet-contract\nyarn ts-node tools/update-gateway-settings.ts\n"})}),"\n",(0,a.jsx)(t.h2,{id:"about-update-gateway-settingsts-file",children:"About update-gateway-settings.ts File"}),"\n",(0,a.jsx)(t.p,{children:"This file is also used for other changes to be made."}),"\n",(0,a.jsxs)(t.p,{children:["For example, if you want to change your node description, you can remove the ",(0,a.jsx)(t.code,{children:"//"})," in front of the code below, write the description section, write ",(0,a.jsx)(t.code,{children:"//"})," in front of other variables and run the file;"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"// const note = 'Give me feedback about this gateway at my Xwitter @testgatewayguy'"})})]})}function g(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>o});n(7294);var a=n(512);const r={tabItem:"tabItem_Ymn6"};var s=n(5893);function o(e){let{children:t,hidden:n,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>x});var a=n(7294),r=n(512),s=n(2466),o=n(6550),i=n(469),l=n(1980),c=n(7392),d=n(12);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function w(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[c,u]=p({queryString:n,groupId:r}),[w,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),f=(()=>{const e=c??w;return g({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)}),[u,m,s]),tabValues:s}}var m=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(5893);function y(e){let{className:t,block:n,selectedValue:a,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),r=i[n].value;r!==a&&(c(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,r.Z)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function k(e){const t=w(e);return(0,b.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,b.jsx)(y,{...t,...e}),(0,b.jsx)(v,{...t,...e})]})}function x(e){const t=(0,m.Z)();return(0,b.jsx)(k,{...e,children:u(e.children)},String(t))}},1914:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Ar-Service-Cover-49ebf40c9e3aa2acc0dd75949bfc6524.jpg"},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var a=n(7294);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);